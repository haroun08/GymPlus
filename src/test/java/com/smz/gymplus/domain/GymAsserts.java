package com.smz.gymplus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GymAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGymAllPropertiesEquals(Gym expected, Gym actual) {
        assertGymAutoGeneratedPropertiesEquals(expected, actual);
        assertGymAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGymAllUpdatablePropertiesEquals(Gym expected, Gym actual) {
        assertGymUpdatableFieldsEquals(expected, actual);
        assertGymUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGymAutoGeneratedPropertiesEquals(Gym expected, Gym actual) {
        assertThat(expected)
            .as("Verify Gym auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGymUpdatableFieldsEquals(Gym expected, Gym actual) {
        assertThat(expected)
            .as("Verify Gym relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getStreetAddress()).as("check streetAddress").isEqualTo(actual.getStreetAddress()))
            .satisfies(e -> assertThat(e.getPostalCode()).as("check postalCode").isEqualTo(actual.getPostalCode()))
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getStateProvince()).as("check stateProvince").isEqualTo(actual.getStateProvince()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGymUpdatableRelationshipsEquals(Gym expected, Gym actual) {}
}
