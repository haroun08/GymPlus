package com.smz.gymplus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductHistoryAllPropertiesEquals(ProductHistory expected, ProductHistory actual) {
        assertProductHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertProductHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductHistoryAllUpdatablePropertiesEquals(ProductHistory expected, ProductHistory actual) {
        assertProductHistoryUpdatableFieldsEquals(expected, actual);
        assertProductHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductHistoryAutoGeneratedPropertiesEquals(ProductHistory expected, ProductHistory actual) {
        assertThat(expected)
            .as("Verify ProductHistory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductHistoryUpdatableFieldsEquals(ProductHistory expected, ProductHistory actual) {
        assertThat(expected)
            .as("Verify ProductHistory relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").isEqualTo(actual.getPrice()))
            .satisfies(e ->
                assertThat(e.getAvailableStockQuantity()).as("check availableStockQuantity").isEqualTo(actual.getAvailableStockQuantity())
            )
            .satisfies(e -> assertThat(e.getValidFrom()).as("check validFrom").isEqualTo(actual.getValidFrom()))
            .satisfies(e -> assertThat(e.getValidTo()).as("check validTo").isEqualTo(actual.getValidTo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductHistoryUpdatableRelationshipsEquals(ProductHistory expected, ProductHistory actual) {
        assertThat(expected)
            .as("Verify ProductHistory relationships")
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()));
    }
}
